{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/zhentianwan/Documents/programming/next.js/my-app/pages/user/[id].tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { SimpleGrid, Text, Alert, Flex, Heading } from \"@chakra-ui/core\";\nimport useSWR from \"swr\";\n\nvar fetcher = function fetcher(url) {\n  var res, data;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 2:\n          res = _context.sent;\n\n          if (res.ok) {\n            _context.next = 5;\n            break;\n          }\n\n          throw Error(\"Yo that's NOT OK!!!\");\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 7:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar UserData = function UserData() {\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSWR = useSWR(\"/api/user/\".concat(id), fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) {\n    return __jsx(Alert, {\n      status: \"error\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    }, error);\n  }\n\n  if (!data) {\n    return __jsx(Alert, {\n      status: \"info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(SimpleGrid, {\n    columns: 2,\n    width: \"2xs\",\n    spacingY: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(Text, {\n    fontWeight: \"blod\",\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"UserID\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, data.id), __jsx(Text, {\n    fontWeight: \"blod\",\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Name\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, data.name), __jsx(Text, {\n    fontWeight: \"blod\",\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Email\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, data.email));\n};\n\nvar user = function user() {\n  return __jsx(Flex, {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    as: \"h1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"User\"), __jsx(UserData, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default user;","map":{"version":3,"sources":["/Users/zhentianwan/Documents/programming/next.js/my-app/pages/user/[id].tsx"],"names":["useRouter","SimpleGrid","Text","Alert","Flex","Heading","useSWR","fetcher","url","fetch","res","ok","Error","json","data","UserData","router","id","query","error","name","email","user"],"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,OAAxC,QAAuD,iBAAvD;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACIC,KAAK,CAACD,GAAD,CADT;;AAAA;AACRE,UAAAA,GADQ;;AAAA,cAETA,GAAG,CAACC,EAFK;AAAA;AAAA;AAAA;;AAAA,gBAGNC,KAAK,CAAC,qBAAD,CAHC;;AAAA;AAAA;AAAA,2CASJF,GAAG,CAACG,IAAJ,EATI;;AAAA;AAKRC,UAAAA,IALQ;AAAA,2CAWPA,IAXO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAcA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,MAAMC,MAAM,GAAGhB,SAAS,EAAxB;AADqB,MAEbiB,EAFa,GAEND,MAAM,CAACE,KAFD,CAEbD,EAFa;;AAAA,gBAGGX,MAAM,qBAAcW,EAAd,GAAoBV,OAApB,CAHT;AAAA,MAGbO,IAHa,WAGbA,IAHa;AAAA,MAGPK,KAHO,WAGPA,KAHO;;AAKrB,MAAIA,KAAJ,EAAW;AACT,WAAO,MAAC,KAAD;AAAO,MAAA,MAAM,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBA,KAAvB,CAAP;AACD;;AAED,MAAI,CAACL,IAAL,EAAW;AACT,WAAO,MAAC,KAAD;AAAO,MAAA,MAAM,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,SACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAE,CAArB;AAAwB,IAAA,KAAK,EAAC,KAA9B;AAAoC,IAAA,QAAQ,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,WAAW,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAI,CAACG,EAAZ,CAJF,EAME,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,WAAW,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,EASE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOH,IAAI,CAACM,IAAZ,CATF,EAWE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,WAAW,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAXF,EAcE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAON,IAAI,CAACO,KAAZ,CAdF,CADF;AAkBD,CA/BD;;AAiCA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,SACE,MAAC,IAAD;AAAM,IAAA,aAAa,EAAC,QAApB;AAA6B,IAAA,UAAU,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAPD;;AASA,eAAeA,IAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport { SimpleGrid, Text, Alert, Flex, Heading } from \"@chakra-ui/core\";\nimport useSWR from \"swr\";\n\nconst fetcher = async (url: string) => {\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw Error(\"Yo that's NOT OK!!!\");\n  }\n  const data: {\n    id: string;\n    name: string;\n    email: string;\n  } = await res.json();\n\n  return data;\n};\n\nconst UserData = () => {\n  const router = useRouter();\n  const { id } = router.query;\n  const { data, error } = useSWR(`/api/user/${id}`, fetcher);\n\n  if (error) {\n    return <Alert status=\"error\">{error}</Alert>;\n  }\n\n  if (!data) {\n    return <Alert status=\"info\">Loading...</Alert>;\n  }\n\n  return (\n    <SimpleGrid columns={2} width=\"2xs\" spacingY={4}>\n      <Text fontWeight=\"blod\" marginRight={4}>\n        UserID\n      </Text>\n      <Text>{data.id}</Text>\n\n      <Text fontWeight=\"blod\" marginRight={4}>\n        Name\n      </Text>\n      <Text>{data.name}</Text>\n\n      <Text fontWeight=\"blod\" marginRight={4}>\n        Email\n      </Text>\n      <Text>{data.email}</Text>\n    </SimpleGrid>\n  );\n};\n\nconst user = () => {\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Heading as=\"h1\">User</Heading>\n      <UserData />\n    </Flex>\n  );\n};\n\nexport default user;\n"]},"metadata":{},"sourceType":"module"}